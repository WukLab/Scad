#!/usr/bin/python

import requests
import argparse
import json
import subprocess
import configparser
import re
import random

CONFIG_FILE = "/tmp/wskaction.config"

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f)

def load_config():
    try:
        with open(CONFIG_FILE) as f:
            return json.load(f)
    except:
        return {}

def build_init(name, code, main, binary = False):
    return { 'value': locals() }
def build_config(name, durl):
    return locals()

def build_run(activation_id, namespace = 'default', value = {}, transports = []):
    return locals()

def call_host(host, path, body, method='POST'):
    url = requests.compat.urljoin(host, path)
    print('calling host {} with {}'.format(url, json.dumps(body)))
    r = requests.request(method, url, data = json.dumps(body))
    print('success')
    return r

def get_container_address(name):
    command = [ 'docker',
                'inspect', '-f',
                '"{{ .NetworkSettings.IPAddress }}"',
                name ]
    cp = subprocess.run(command, capture_output=True)
    cp.check_returncode()
    return 'http://{}:8080'.format(cp.stdout.decode()[1:-2])

def reset_container(name):
    def _execute(command):
        try:
            subprocess.run(command).check_returncode()
        except:
            pass
        finally:
            pass
    _execute(['docker', 'stop', name])
    _execute(['docker', 'rm', name])
    _execute('docker run --cap-add=IPC_LOCK --device=/dev/infiniband/uverbs0 --name={} -d whisk/actionloop-python-v3.7:latest'.format(name).split())
    print('reset container {} success'.format(name))

def gen_activationid(length):
    hexdigits = "0123456789abcdef"
    return ''.join([random.choice(hexdigits) for _ in range(length)])

def get_name(args):
    name = args.name
    if name is None:
        if args.file is None:
            parser.error("require --file to be used with init")
        name = 'action_' + '_'.join(re.split('/|\.', args.file))
    name = name[:64] # get short name 
    return name

if __name__ == '__main__':

    # Helper functions
    actions = ['init', 'run', 'reset', 'config', 'message', 'fakerun']

    # Argument parser
    parser = argparse.ArgumentParser(description='Util for test openwhisk runtime dockers.')
    parser.add_argument('-f', '--file', type=str,
                        help='input file of the script')
    parser.add_argument('-m', '--main', type=str, default='main',
                        help='name of the action')
    parser.add_argument('-n', '--name', type=str,
                        help='name of the action')
    parser.add_argument('-a', '--aid', type=str,
                        help='activation id')
    parser.add_argument('-t', '--transport', nargs='+',
                        help='transports to be added to the run command')
    parser.add_argument('-c', '--container', type=str, required=True,
                        help='name of the contaienr')
    parser.add_argument('action', choices=actions, nargs='+',
                        help='actions to be ')
    args = parser.parse_args()

    for action in args.action:
        if action == 'init':
            if args.file is None:
                parser.error("require --file to be used with init")
            name = get_name(args)
            host = get_container_address(args.container)

            with open(args.file) as f:
                code = f.read()
                body = build_init(name, code, args.main)

                call_host(host, '/init', body)

        elif action == 'run':
            host = get_container_address(args.container)
            aid = args.aid
            if aid is None:
                aid = gen_activationid(32) 
            body = build_run(aid, transports = args.transport)
            if args.transport is None:
                del body['transports']
            save_config({'aid': aid})
            call_host(host, '/run', body)

        elif action == 'fakerun':
            host = get_container_address(args.container)
            aid = args.aid
            if aid is None:
                aid = gen_activationid(32) 
            body = json.loads("""
            {"action_name":"/whisk.system/test-action/corunning-1-node/compute1",
             "action_version":"0.0.1","activation_id":"90635a75f9bb4367a35a75f9bbb367f9",
             "app_activation_id":"d4af0f3ad94d47efaf0f3ad94db7ef26",
             "deadline":"1638931828076",
             "function_activation_id":"5a27974fbd104371a7974fbd10937123",
             "name":"90635a75f9bb4367a35a75f9bbb367f9",
             "namespace":"whisk.system",
             "server_url":"8081",
             "transaction_id":"80bo9NHZVFtVJbu7M86N1ePHO1sArtXn",
             "transports":["mem1;rdma_uverbs_proxy;"],
             "value":{}}
            """)
            save_config({'aid': aid})
            call_host(host, '/run', body)

        elif action == 'reset':
            reset_container(args.container)

        elif action == 'message':
            host = get_container_address(args.container)
            aid = load_config().get('aid', args.aid)
            if aid is None:
                parser.error("requrie aid to be attached")
            r = call_host(host,
                      '/action/{}/messages'.format(aid),
                      {}, method = 'GET')
            print(r.text)

        elif action == 'config':
            host = get_container_address(args.container)
            aid = load_config().get('aid', args.aid)
            if aid is None:
                parser.error("requrie aid to be attached")
            if args.transport is None or len(args.transport) != 1:
                parser.error("require --transport to be used with single config")
            trans, _, *config = args.transport[0].split(';')
            config = ';'.join(config)

            body = build_config(trans, config)
            call_host(host,
                      '/action/{}/transport/{}'.format(aid, trans),
                      body, method = 'PUT')
    
