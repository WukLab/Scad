#!/usr/bin/python

import requests
import argparse
import json
import subprocess
import configparser
import re
import random

def build_init(name, code, main, binary = False):
    # should work..
    return { 'value': locals() }

def build_run(activation_id, namespace = 'default', value = {}):
    return locals()

def call_host(host, path, body):
    url = requests.compat.urljoin(host, path)
    print('calling host {} with {}'.format(url, json.dumps(body)))
    requests.post(url, data = json.dumps(body))
    print('success')

def get_container_address(name):
    command = [ 'docker',
                'inspect', '-f',
                '"{{ .NetworkSettings.IPAddress }}"',
                name ]
    cp = subprocess.run(command, capture_output=True)
    cp.check_returncode()
    return 'http://{}:8080'.format(cp.stdout.decode()[1:-2])

def reset_container(name):
    def _execute(command):
        try:
            subprocess.run(command).check_returncode()
        finally:
            pass
    _execute(['docker', 'stop', name])
    _execute(['docker', 'rm', name])
    _execute('docker run --name={} -d whisk/actionloop-python-v3.7:latest'.format(name).split())
    print('reset container {} success'.format(name))

def gen_activationid(length):
    hexdigits = "0123456789abcdef"
    return ''.join([random.choice(hexdigits) for _ in range(length)])

if __name__ == '__main__':

    # Helper functions
    actions = ['init', 'run', 'reset']
    CONFIG_FILE = '/tmp/wskruntime_config'
    def load_config(args):
        config = configparser.ConfigParser()
        if os.path.exists(CONFIG_FILE):
            config.read(CONFIG_FILE)

    def save_config(config):
        with open(CONFIG_FILE, 'w') as configfile:
            config.write(configfile)

    # Argument parser
    parser = argparse.ArgumentParser(description='Util for test openwhisk runtime dockers.')
    parser.add_argument('-f', '--file', type=str,
                        help='input file of the script')
    parser.add_argument('-m', '--main', type=str, default='main',
                        help='name of the action')
    parser.add_argument('-n', '--name', type=str,
                        help='name of the action')
    parser.add_argument('-c', '--container', type=str, required=True,
                        help='name of the contaienr')
    parser.add_argument('-a', '--activationid', type=str,
                        help='activation id')
    parser.add_argument('action', choices=actions, nargs='+',
                        help='actions to be ')
    args = parser.parse_args()

    host = get_container_address(args.container)
    for action in args.action:
        if action == 'init':
            if args.file is None:
                parser.error("require --file to be used with init")
            name = args.name
            if name == None:
                name = 'action_' + '_'.join(re.split('/|\.', args.file))
            name = name[:64] # get short name 

            with open(args.file) as f:
                code = f.read()
                body = build_init(name, code, args.main)

                call_host(host, '/init', body)

        elif action == 'run':
            aid = gen_activationid(32)
            body = build_run(aid)
            call_host(host, '/run', body)

        elif action == 'reset':
            reset_container(args.container)

    
