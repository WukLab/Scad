include classpath("application.conf")

# Specify any custom config here. For example
# whisk {
#   metrics {
#     prometheus-enabled = true
#   }
# }

whisk {
  container-factory {
    use-rdma = {{ use_rdma }}
    container-args {
      network: {{ container_network }}
    }
  }

  controller {
    dependency-prewarm = {{ dependency_prewarm }}
  }

  docker.client {
    # Docker < 1.13.1 has a known problem: if more than 10 containers are created (docker run)
    # concurrently, there is a good chance that some of them will fail.
    # See https://github.com/moby/moby/issues/29369
    # Use a semaphore to make sure that at most 10 `docker run` commands are active
    # the same time.
    # 0 means that there are infinite parallel runs.
    parallel-runs: 0
  }
  resources {
        min {
            cpu = 1
            mem = 32 m
            storage = 32 m
        }
        max {
            cpu = 16
            mem = 32 g
            storage = 64 g
        }
        std {
            cpu = 1
            mem = 128 m
            storage = 256 m
        }
  }
  container-pool {
    invoker-pool-resources {
        compute-pool {
            cpu = 32
            mem = 32 g
            storage = 64 g
        }
        mem-pool {
            cpu = 4
            mem = 64 g
            storage = 64 g
        }
        balanced-pool {
            cpu = 8
            mem = 16 g
            storage = 64 g
        }
    }
    user-memory: 55 g
    concurrent-peek-factor: 0.5 #factor used to limit message peeking: 0 < factor <= 1.0 - larger number improves concurrent processing, but increases risk of message loss during invoker crash
    akka-client: false # if true, use PoolingContainerClient for HTTP from invoker to action container (otherwise use ApacheBlockingContainerClient)
    prewarm-expiration-check-interval: {{ container_pool_prewarm_expirationCheckInterval }} # period to check for prewarm expiration
    prewarm-expiration-check-interval-variance: 2 seconds # varies expiration across invokers to avoid many concurrent expirations
    prewarm-expiration-limit: 100 # number of prewarms to expire in one expiration cycle (remaining expired will be considered for expiration in next cycle)
  }
  concurrency-limit {
    min = 1
    max = 500
    std = 1
  }
  container-proxy {
      timeouts {
        idle-container = {{ containerProxy_timeouts_idleContainer }}
        pause-grace = 500 seconds
      }
  }
}
